'------------------------------------------------------------------------------
' <auto-generated>
'     Este código fue generado por una herramienta.
'     Versión del motor en tiempo de ejecución:2.0.50727.3603
'
'     Los cambios en este archivo podrían causar un comportamiento incorrecto y se perderán si
'     se vuelve a generar el código.
' </auto-generated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On

Imports System
Imports System.ComponentModel
Imports System.Diagnostics
Imports System.Web.Services
Imports System.Web.Services.Protocols
Imports System.Xml.Serialization

'
'This source code was auto-generated by wsdl, Version=2.0.50727.42.
'
Namespace Proxy
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42"), _
     System.Diagnostics.DebuggerStepThroughAttribute(), _
     System.ComponentModel.DesignerCategoryAttribute("code"), _
     System.Web.Services.WebServiceBindingAttribute(Name:="ValidarUsuarioSoap", [Namespace]:="http://dipres.cl/webservices")> _
    Partial Public Class ValidarUsuario
        Inherits System.Web.Services.Protocols.SoapHttpClientProtocol

        Private CuentaOperationCompleted As System.Threading.SendOrPostCallback

        Private CuentaBasicaOperationCompleted As System.Threading.SendOrPostCallback

        Private CuentaValidaOperationCompleted As System.Threading.SendOrPostCallback

        Private EntidadesOperationCompleted As System.Threading.SendOrPostCallback

        '''<remarks/>
        Public Sub New()
            MyBase.New()
        End Sub

        '''<remarks/>
        Public Event CuentaCompleted As CuentaCompletedEventHandler

        '''<remarks/>
        Public Event CuentaBasicaCompleted As CuentaBasicaCompletedEventHandler

        '''<remarks/>
        Public Event CuentaValidaCompleted As CuentaValidaCompletedEventHandler

        '''<remarks/>
        Public Event EntidadesCompleted As EntidadesCompletedEventHandler

        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://dipres.cl/webservices/Cuenta", RequestNamespace:="http://dipres.cl/webservices", ResponseNamespace:="http://dipres.cl/webservices", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)> _
        Public Function Cuenta(ByVal Usuario As String, ByVal Contraseña As String, ByVal Proceso As Integer, ByVal Periodo As Integer, ByVal Navegador As String, ByVal SistemaOperativo As String, ByVal DireccionIP As String, ByVal Registra As Boolean) As DatosUsuario
            Dim results() As Object = Me.Invoke("Cuenta", New Object() {Usuario, Contraseña, Proceso, Periodo, Navegador, SistemaOperativo, DireccionIP, Registra})
            Return CType(results(0), DatosUsuario)
        End Function

        '''<remarks/>
        Public Function BeginCuenta(ByVal Usuario As String, ByVal Contraseña As String, ByVal Proceso As Integer, ByVal Periodo As Integer, ByVal Navegador As String, ByVal SistemaOperativo As String, ByVal DireccionIP As String, ByVal Registra As Boolean, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("Cuenta", New Object() {Usuario, Contraseña, Proceso, Periodo, Navegador, SistemaOperativo, DireccionIP, Registra}, callback, asyncState)
        End Function

        '''<remarks/>
        Public Function EndCuenta(ByVal asyncResult As System.IAsyncResult) As DatosUsuario
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0), DatosUsuario)
        End Function

        '''<remarks/>
        Public Overloads Sub CuentaAsync(ByVal Usuario As String, ByVal Contraseña As String, ByVal Proceso As Integer, ByVal Periodo As Integer, ByVal Navegador As String, ByVal SistemaOperativo As String, ByVal DireccionIP As String, ByVal Registra As Boolean)
            Me.CuentaAsync(Usuario, Contraseña, Proceso, Periodo, Navegador, SistemaOperativo, DireccionIP, Registra, Nothing)
        End Sub

        '''<remarks/>
        Public Overloads Sub CuentaAsync(ByVal Usuario As String, ByVal Contraseña As String, ByVal Proceso As Integer, ByVal Periodo As Integer, ByVal Navegador As String, ByVal SistemaOperativo As String, ByVal DireccionIP As String, ByVal Registra As Boolean, ByVal userState As Object)
            If (Me.CuentaOperationCompleted Is Nothing) Then
                Me.CuentaOperationCompleted = AddressOf Me.OnCuentaOperationCompleted
            End If
            Me.InvokeAsync("Cuenta", New Object() {Usuario, Contraseña, Proceso, Periodo, Navegador, SistemaOperativo, DireccionIP, Registra}, Me.CuentaOperationCompleted, userState)
        End Sub

        Private Sub OnCuentaOperationCompleted(ByVal arg As Object)
            If (Not (Me.CuentaCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg, System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent CuentaCompleted(Me, New CuentaCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub

        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://dipres.cl/webservices/CuentaBasica", RequestNamespace:="http://dipres.cl/webservices", ResponseNamespace:="http://dipres.cl/webservices", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)> _
        Public Function CuentaBasica(ByVal Usuario As String, ByVal Contraseña As String) As Boolean
            Dim results() As Object = Me.Invoke("CuentaBasica", New Object() {Usuario, Contraseña})
            Return CType(results(0), Boolean)
        End Function

        '''<remarks/>
        Public Function BeginCuentaBasica(ByVal Usuario As String, ByVal Contraseña As String, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("CuentaBasica", New Object() {Usuario, Contraseña}, callback, asyncState)
        End Function

        '''<remarks/>
        Public Function EndCuentaBasica(ByVal asyncResult As System.IAsyncResult) As Boolean
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0), Boolean)
        End Function

        '''<remarks/>
        Public Overloads Sub CuentaBasicaAsync(ByVal Usuario As String, ByVal Contraseña As String)
            Me.CuentaBasicaAsync(Usuario, Contraseña, Nothing)
        End Sub

        '''<remarks/>
        Public Overloads Sub CuentaBasicaAsync(ByVal Usuario As String, ByVal Contraseña As String, ByVal userState As Object)
            If (Me.CuentaBasicaOperationCompleted Is Nothing) Then
                Me.CuentaBasicaOperationCompleted = AddressOf Me.OnCuentaBasicaOperationCompleted
            End If
            Me.InvokeAsync("CuentaBasica", New Object() {Usuario, Contraseña}, Me.CuentaBasicaOperationCompleted, userState)
        End Sub

        Private Sub OnCuentaBasicaOperationCompleted(ByVal arg As Object)
            If (Not (Me.CuentaBasicaCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg, System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent CuentaBasicaCompleted(Me, New CuentaBasicaCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub

        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://dipres.cl/webservices/CuentaValida", RequestNamespace:="http://dipres.cl/webservices", ResponseNamespace:="http://dipres.cl/webservices", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)> _
        Public Function CuentaValida(ByVal Usuario As String, ByVal Contraseña As String) As Integer
            Dim results() As Object = Me.Invoke("CuentaValida", New Object() {Usuario, Contraseña})
            Return CType(results(0), Integer)
        End Function

        '''<remarks/>
        Public Function BeginCuentaValida(ByVal Usuario As String, ByVal Contraseña As String, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("CuentaValida", New Object() {Usuario, Contraseña}, callback, asyncState)
        End Function

        '''<remarks/>
        Public Function EndCuentaValida(ByVal asyncResult As System.IAsyncResult) As Integer
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0), Integer)
        End Function

        '''<remarks/>
        Public Overloads Sub CuentaValidaAsync(ByVal Usuario As String, ByVal Contraseña As String)
            Me.CuentaValidaAsync(Usuario, Contraseña, Nothing)
        End Sub

        '''<remarks/>
        Public Overloads Sub CuentaValidaAsync(ByVal Usuario As String, ByVal Contraseña As String, ByVal userState As Object)
            If (Me.CuentaValidaOperationCompleted Is Nothing) Then
                Me.CuentaValidaOperationCompleted = AddressOf Me.OnCuentaValidaOperationCompleted
            End If
            Me.InvokeAsync("CuentaValida", New Object() {Usuario, Contraseña}, Me.CuentaValidaOperationCompleted, userState)
        End Sub

        Private Sub OnCuentaValidaOperationCompleted(ByVal arg As Object)
            If (Not (Me.CuentaValidaCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg, System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent CuentaValidaCompleted(Me, New CuentaValidaCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub

        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://dipres.cl/webservices/Entidades", RequestNamespace:="http://dipres.cl/webservices", ResponseNamespace:="http://dipres.cl/webservices", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)> _
        Public Function Entidades(ByVal Usuario As String, ByVal Contraseña As String, ByVal Proceso As Integer, ByVal Periodo As Integer) As dsEntProcUsu
            Dim results() As Object = Me.Invoke("Entidades", New Object() {Usuario, Contraseña, Proceso, Periodo})
            Return CType(results(0), dsEntProcUsu)
        End Function

        '''<remarks/>
        Public Function BeginEntidades(ByVal Usuario As String, ByVal Contraseña As String, ByVal Proceso As Integer, ByVal Periodo As Integer, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("Entidades", New Object() {Usuario, Contraseña, Proceso, Periodo}, callback, asyncState)
        End Function

        '''<remarks/>
        Public Function EndEntidades(ByVal asyncResult As System.IAsyncResult) As dsEntProcUsu
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0), dsEntProcUsu)
        End Function

        '''<remarks/>
        Public Overloads Sub EntidadesAsync(ByVal Usuario As String, ByVal Contraseña As String, ByVal Proceso As Integer, ByVal Periodo As Integer)
            Me.EntidadesAsync(Usuario, Contraseña, Proceso, Periodo, Nothing)
        End Sub

        '''<remarks/>
        Public Overloads Sub EntidadesAsync(ByVal Usuario As String, ByVal Contraseña As String, ByVal Proceso As Integer, ByVal Periodo As Integer, ByVal userState As Object)
            If (Me.EntidadesOperationCompleted Is Nothing) Then
                Me.EntidadesOperationCompleted = AddressOf Me.OnEntidadesOperationCompleted
            End If
            Me.InvokeAsync("Entidades", New Object() {Usuario, Contraseña, Proceso, Periodo}, Me.EntidadesOperationCompleted, userState)
        End Sub

        Private Sub OnEntidadesOperationCompleted(ByVal arg As Object)
            If (Not (Me.EntidadesCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg, System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent EntidadesCompleted(Me, New EntidadesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub

        '''<remarks/>
        Public Shadows Sub CancelAsync(ByVal userState As Object)
            MyBase.CancelAsync(userState)
        End Sub
    End Class
    
    '''<comentarios/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42"),  _
     System.SerializableAttribute(),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code"),  _
     System.Xml.Serialization.XmlTypeAttribute([Namespace]:="http://dipres.cl/webservices")>  _
    Partial Public Class DatosUsuario
        
        Private perfilField As Integer
        
        Private iDUsuarioField As Integer
        
        Private retornoField As Integer
        
        Private nombrePerfilField As String
        
        '''<comentarios/>
        Public Property Perfil() As Integer
            Get
                Return Me.perfilField
            End Get
            Set
                Me.perfilField = value
            End Set
        End Property
        
        '''<comentarios/>
        Public Property IDUsuario() As Integer
            Get
                Return Me.iDUsuarioField
            End Get
            Set
                Me.iDUsuarioField = value
            End Set
        End Property
        
        '''<comentarios/>
        Public Property Retorno() As Integer
            Get
                Return Me.retornoField
            End Get
            Set
                Me.retornoField = value
            End Set
        End Property
        
        '''<comentarios/>
        Public Property NombrePerfil() As String
            Get
                Return Me.nombrePerfilField
            End Get
            Set
                Me.nombrePerfilField = value
            End Set
        End Property
    End Class
    
    'Esta definición de tipo ha sido generada por la extensión del importador de esquemas System.Data.Design.TypedDataSetSchemaImporterExtension.
    '''<summary>
    '''Represents a strongly typed in-memory cache of data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema"),  _
     Global.System.Xml.Serialization.XmlRootAttribute("dsEntProcUsu"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")>  _
    Partial Public Class dsEntProcUsu
        Inherits Global.System.Data.DataSet
        
        Private tableEntidadesProcesoUsuario As EntidadesProcesoUsuarioDataTable
        
        Private _schemaSerializationMode As Global.System.Data.SchemaSerializationMode = Global.System.Data.SchemaSerializationMode.IncludeSchema
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.BeginInit
            Me.InitClass
            Dim schemaChangedHandler As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
            AddHandler MyBase.Tables.CollectionChanged, schemaChangedHandler
            AddHandler MyBase.Relations.CollectionChanged, schemaChangedHandler
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context, false)
            If (Me.IsBinarySerialized(info, context) = true) Then
                Me.InitVars(false)
                Dim schemaChangedHandler1 As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
                AddHandler Me.Tables.CollectionChanged, schemaChangedHandler1
                AddHandler Me.Relations.CollectionChanged, schemaChangedHandler1
                Return
            End If
            Dim strSchema As String = CType(info.GetValue("XmlSchema", GetType(String)),String)
            If (Me.DetermineSchemaSerializationMode(info, context) = Global.System.Data.SchemaSerializationMode.IncludeSchema) Then
                Dim ds As Global.System.Data.DataSet = New Global.System.Data.DataSet
                ds.ReadXmlSchema(New Global.System.Xml.XmlTextReader(New Global.System.IO.StringReader(strSchema)))
                If (Not (ds.Tables("EntidadesProcesoUsuario")) Is Nothing) Then
                    MyBase.Tables.Add(New EntidadesProcesoUsuarioDataTable(ds.Tables("EntidadesProcesoUsuario")))
                End If
                Me.DataSetName = ds.DataSetName
                Me.Prefix = ds.Prefix
                Me.Namespace = ds.Namespace
                Me.Locale = ds.Locale
                Me.CaseSensitive = ds.CaseSensitive
                Me.EnforceConstraints = ds.EnforceConstraints
                Me.Merge(ds, false, Global.System.Data.MissingSchemaAction.Add)
                Me.InitVars
            Else
                Me.ReadXmlSchema(New Global.System.Xml.XmlTextReader(New Global.System.IO.StringReader(strSchema)))
            End If
            Me.GetSerializationData(info, context)
            Dim schemaChangedHandler As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
            AddHandler MyBase.Tables.CollectionChanged, schemaChangedHandler
            AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false),  _
         Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
        Public ReadOnly Property EntidadesProcesoUsuario() As EntidadesProcesoUsuarioDataTable
            Get
                Return Me.tableEntidadesProcesoUsuario
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.BrowsableAttribute(true),  _
         Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Visible)>  _
        Public Overrides Property SchemaSerializationMode() As Global.System.Data.SchemaSerializationMode
            Get
                Return Me._schemaSerializationMode
            End Get
            Set
                Me._schemaSerializationMode = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Hidden)>  _
        Public Shadows ReadOnly Property Tables() As Global.System.Data.DataTableCollection
            Get
                Return MyBase.Tables
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Hidden)>  _
        Public Shadows ReadOnly Property Relations() As Global.System.Data.DataRelationCollection
            Get
                Return MyBase.Relations
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub InitializeDerivedDataSet()
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataSet
            Dim cln As dsEntProcUsu = CType(MyBase.Clone,dsEntProcUsu)
            cln.InitVars
            cln.SchemaSerializationMode = Me.SchemaSerializationMode
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function ShouldSerializeTables() As Boolean
            Return false
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function ShouldSerializeRelations() As Boolean
            Return false
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub ReadXmlSerializable(ByVal reader As Global.System.Xml.XmlReader)
            If (Me.DetermineSchemaSerializationMode(reader) = Global.System.Data.SchemaSerializationMode.IncludeSchema) Then
                Me.Reset
                Dim ds As Global.System.Data.DataSet = New Global.System.Data.DataSet
                ds.ReadXml(reader)
                If (Not (ds.Tables("EntidadesProcesoUsuario")) Is Nothing) Then
                    MyBase.Tables.Add(New EntidadesProcesoUsuarioDataTable(ds.Tables("EntidadesProcesoUsuario")))
                End If
                Me.DataSetName = ds.DataSetName
                Me.Prefix = ds.Prefix
                Me.Namespace = ds.Namespace
                Me.Locale = ds.Locale
                Me.CaseSensitive = ds.CaseSensitive
                Me.EnforceConstraints = ds.EnforceConstraints
                Me.Merge(ds, false, Global.System.Data.MissingSchemaAction.Add)
                Me.InitVars
            Else
                Me.ReadXml(reader)
                Me.InitVars
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetSchemaSerializable() As Global.System.Xml.Schema.XmlSchema
            Dim stream As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
            Me.WriteXmlSchema(New Global.System.Xml.XmlTextWriter(stream, Nothing))
            stream.Position = 0
            Return Global.System.Xml.Schema.XmlSchema.Read(New Global.System.Xml.XmlTextReader(stream), Nothing)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Overloads Sub InitVars()
            Me.InitVars(true)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Overloads Sub InitVars(ByVal initTable As Boolean)
            Me.tableEntidadesProcesoUsuario = CType(MyBase.Tables("EntidadesProcesoUsuario"),EntidadesProcesoUsuarioDataTable)
            If (initTable = true) Then
                If (Not (Me.tableEntidadesProcesoUsuario) Is Nothing) Then
                    Me.tableEntidadesProcesoUsuario.InitVars
                End If
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.DataSetName = "dsEntProcUsu"
            Me.Prefix = ""
            Me.Namespace = "http://tempuri.org/dsEntProcUsu.xsd"
            Me.EnforceConstraints = true
            Me.SchemaSerializationMode = Global.System.Data.SchemaSerializationMode.IncludeSchema
            Me.tableEntidadesProcesoUsuario = New EntidadesProcesoUsuarioDataTable
            MyBase.Tables.Add(Me.tableEntidadesProcesoUsuario)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Function ShouldSerializeEntidadesProcesoUsuario() As Boolean
            Return false
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub SchemaChanged(ByVal sender As Object, ByVal e As Global.System.ComponentModel.CollectionChangeEventArgs)
            If (e.Action = Global.System.ComponentModel.CollectionChangeAction.Remove) Then
                Me.InitVars
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedDataSetSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim ds As dsEntProcUsu = New dsEntProcUsu
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim any As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any.Namespace = ds.Namespace
            sequence.Items.Add(any)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
        
        Public Delegate Sub EntidadesProcesoUsuarioRowChangeEventHandler(ByVal sender As Object, ByVal e As EntidadesProcesoUsuarioRowChangeEvent)
        
        '''<summary>
        '''Represents the strongly named DataTable class.
        '''</summary>
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
         Global.System.Serializable(),  _
         Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
        Partial Public Class EntidadesProcesoUsuarioDataTable
            Inherits Global.System.Data.DataTable
            Implements Global.System.Collections.IEnumerable
            
            Private columnentidades_tbid As Global.System.Data.DataColumn
            
            Private columnclasificador_institucional As Global.System.Data.DataColumn
            
            Private columndescripcion As Global.System.Data.DataColumn
            
            Private columnnombre_corto As Global.System.Data.DataColumn
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Sub New()
                MyBase.New
                Me.TableName = "EntidadesProcesoUsuario"
                Me.BeginInit
                Me.InitClass
                Me.EndInit
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Friend Sub New(ByVal table As Global.System.Data.DataTable)
                MyBase.New
                Me.TableName = table.TableName
                If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                    Me.CaseSensitive = table.CaseSensitive
                End If
                If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                    Me.Locale = table.Locale
                End If
                If (table.Namespace <> table.DataSet.Namespace) Then
                    Me.Namespace = table.Namespace
                End If
                Me.Prefix = table.Prefix
                Me.MinimumCapacity = table.MinimumCapacity
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
                MyBase.New(info, context)
                Me.InitVars
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public ReadOnly Property entidades_tbidColumn() As Global.System.Data.DataColumn
                Get
                    Return Me.columnentidades_tbid
                End Get
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public ReadOnly Property clasificador_institucionalColumn() As Global.System.Data.DataColumn
                Get
                    Return Me.columnclasificador_institucional
                End Get
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public ReadOnly Property descripcionColumn() As Global.System.Data.DataColumn
                Get
                    Return Me.columndescripcion
                End Get
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public ReadOnly Property nombre_cortoColumn() As Global.System.Data.DataColumn
                Get
                    Return Me.columnnombre_corto
                End Get
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.ComponentModel.Browsable(false)>  _
            Public ReadOnly Property Count() As Integer
                Get
                    Return Me.Rows.Count
                End Get
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Default ReadOnly Property Item(ByVal index As Integer) As EntidadesProcesoUsuarioRow
                Get
                    Return CType(Me.Rows(index),EntidadesProcesoUsuarioRow)
                End Get
            End Property
            
            Public Event EntidadesProcesoUsuarioRowChanging As EntidadesProcesoUsuarioRowChangeEventHandler
            
            Public Event EntidadesProcesoUsuarioRowChanged As EntidadesProcesoUsuarioRowChangeEventHandler
            
            Public Event EntidadesProcesoUsuarioRowDeleting As EntidadesProcesoUsuarioRowChangeEventHandler
            
            Public Event EntidadesProcesoUsuarioRowDeleted As EntidadesProcesoUsuarioRowChangeEventHandler
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Overloads Sub AddEntidadesProcesoUsuarioRow(ByVal row As EntidadesProcesoUsuarioRow)
                Me.Rows.Add(row)
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Overloads Function AddEntidadesProcesoUsuarioRow(ByVal clasificador_institucional As String, ByVal descripcion As String, ByVal nombre_corto As String) As EntidadesProcesoUsuarioRow
                Dim rowEntidadesProcesoUsuarioRow As EntidadesProcesoUsuarioRow = CType(Me.NewRow,EntidadesProcesoUsuarioRow)
                Dim columnValuesArray() As Object = New Object() {Nothing, clasificador_institucional, descripcion, nombre_corto}
                rowEntidadesProcesoUsuarioRow.ItemArray = columnValuesArray
                Me.Rows.Add(rowEntidadesProcesoUsuarioRow)
                Return rowEntidadesProcesoUsuarioRow
            End Function
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Function FindByentidades_tbid(ByVal entidades_tbid As Integer) As EntidadesProcesoUsuarioRow
                Return CType(Me.Rows.Find(New Object() {entidades_tbid}),EntidadesProcesoUsuarioRow)
            End Function
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
                Return Me.Rows.GetEnumerator
            End Function
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Overrides Function Clone() As Global.System.Data.DataTable
                Dim cln As EntidadesProcesoUsuarioDataTable = CType(MyBase.Clone,EntidadesProcesoUsuarioDataTable)
                cln.InitVars
                Return cln
            End Function
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
                Return New EntidadesProcesoUsuarioDataTable
            End Function
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Friend Sub InitVars()
                Me.columnentidades_tbid = MyBase.Columns("entidades_tbid")
                Me.columnclasificador_institucional = MyBase.Columns("clasificador_institucional")
                Me.columndescripcion = MyBase.Columns("descripcion")
                Me.columnnombre_corto = MyBase.Columns("nombre_corto")
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Private Sub InitClass()
                Me.columnentidades_tbid = New Global.System.Data.DataColumn("entidades_tbid", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
                MyBase.Columns.Add(Me.columnentidades_tbid)
                Me.columnclasificador_institucional = New Global.System.Data.DataColumn("clasificador_institucional", GetType(String), Nothing, Global.System.Data.MappingType.Element)
                MyBase.Columns.Add(Me.columnclasificador_institucional)
                Me.columndescripcion = New Global.System.Data.DataColumn("descripcion", GetType(String), Nothing, Global.System.Data.MappingType.Element)
                MyBase.Columns.Add(Me.columndescripcion)
                Me.columnnombre_corto = New Global.System.Data.DataColumn("nombre_corto", GetType(String), Nothing, Global.System.Data.MappingType.Element)
                MyBase.Columns.Add(Me.columnnombre_corto)
                Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnentidades_tbid}, true))
                Me.columnentidades_tbid.AutoIncrement = true
                Me.columnentidades_tbid.AllowDBNull = false
                Me.columnentidades_tbid.ReadOnly = true
                Me.columnentidades_tbid.Unique = true
                Me.columnclasificador_institucional.AllowDBNull = false
                Me.columnclasificador_institucional.MaxLength = 20
                Me.columndescripcion.AllowDBNull = false
                Me.columndescripcion.MaxLength = 256
                Me.columnnombre_corto.AllowDBNull = false
                Me.columnnombre_corto.MaxLength = 100
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Function NewEntidadesProcesoUsuarioRow() As EntidadesProcesoUsuarioRow
                Return CType(Me.NewRow,EntidadesProcesoUsuarioRow)
            End Function
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
                Return New EntidadesProcesoUsuarioRow(builder)
            End Function
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Protected Overrides Function GetRowType() As Global.System.Type
                Return GetType(EntidadesProcesoUsuarioRow)
            End Function
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
                MyBase.OnRowChanged(e)
                If (Not (Me.EntidadesProcesoUsuarioRowChangedEvent) Is Nothing) Then
                    RaiseEvent EntidadesProcesoUsuarioRowChanged(Me, New EntidadesProcesoUsuarioRowChangeEvent(CType(e.Row,EntidadesProcesoUsuarioRow), e.Action))
                End If
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
                MyBase.OnRowChanging(e)
                If (Not (Me.EntidadesProcesoUsuarioRowChangingEvent) Is Nothing) Then
                    RaiseEvent EntidadesProcesoUsuarioRowChanging(Me, New EntidadesProcesoUsuarioRowChangeEvent(CType(e.Row,EntidadesProcesoUsuarioRow), e.Action))
                End If
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
                MyBase.OnRowDeleted(e)
                If (Not (Me.EntidadesProcesoUsuarioRowDeletedEvent) Is Nothing) Then
                    RaiseEvent EntidadesProcesoUsuarioRowDeleted(Me, New EntidadesProcesoUsuarioRowChangeEvent(CType(e.Row,EntidadesProcesoUsuarioRow), e.Action))
                End If
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
                MyBase.OnRowDeleting(e)
                If (Not (Me.EntidadesProcesoUsuarioRowDeletingEvent) Is Nothing) Then
                    RaiseEvent EntidadesProcesoUsuarioRowDeleting(Me, New EntidadesProcesoUsuarioRowChangeEvent(CType(e.Row,EntidadesProcesoUsuarioRow), e.Action))
                End If
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Sub RemoveEntidadesProcesoUsuarioRow(ByVal row As EntidadesProcesoUsuarioRow)
                Me.Rows.Remove(row)
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
                Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
                Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
                Dim ds As dsEntProcUsu = New dsEntProcUsu
                Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
                any1.Namespace = "http://www.w3.org/2001/XMLSchema"
                any1.MinOccurs = New Decimal(0)
                any1.MaxOccurs = Decimal.MaxValue
                any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
                sequence.Items.Add(any1)
                Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
                any2.MinOccurs = New Decimal(1)
                any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
                sequence.Items.Add(any2)
                Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
                attribute1.Name = "namespace"
                attribute1.FixedValue = ds.Namespace
                type.Attributes.Add(attribute1)
                Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
                attribute2.Name = "tableTypeName"
                attribute2.FixedValue = "EntidadesProcesoUsuarioDataTable"
                type.Attributes.Add(attribute2)
                type.Particle = sequence
                Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
                If xs.Contains(dsSchema.TargetNamespace) Then
                    Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                    Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                    Try 
                        Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                        dsSchema.Write(s1)
                        Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                        Do While schemas.MoveNext
                            schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                            s2.SetLength(0)
                            schema.Write(s2)
                            If (s1.Length = s2.Length) Then
                                s1.Position = 0
                                s2.Position = 0
                                
                                Do While ((s1.Position <> s1.Length)  _
                                            AndAlso (s1.ReadByte = s2.ReadByte))
                                    
                                    
                                Loop
                                If (s1.Position = s1.Length) Then
                                    Return type
                                End If
                            End If
                            
                        Loop
                    Finally
                        If (Not (s1) Is Nothing) Then
                            s1.Close
                        End If
                        If (Not (s2) Is Nothing) Then
                            s2.Close
                        End If
                    End Try
                End If
                xs.Add(dsSchema)
                Return type
            End Function
        End Class
        
        '''<summary>
        '''Represents strongly named DataRow class.
        '''</summary>
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
        Partial Public Class EntidadesProcesoUsuarioRow
            Inherits Global.System.Data.DataRow
            
            Private tableEntidadesProcesoUsuario As EntidadesProcesoUsuarioDataTable
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
                MyBase.New(rb)
                Me.tableEntidadesProcesoUsuario = CType(Me.Table,EntidadesProcesoUsuarioDataTable)
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Property entidades_tbid() As Integer
                Get
                    Return CType(Me(Me.tableEntidadesProcesoUsuario.entidades_tbidColumn),Integer)
                End Get
                Set
                    Me(Me.tableEntidadesProcesoUsuario.entidades_tbidColumn) = value
                End Set
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Property clasificador_institucional() As String
                Get
                    Return CType(Me(Me.tableEntidadesProcesoUsuario.clasificador_institucionalColumn),String)
                End Get
                Set
                    Me(Me.tableEntidadesProcesoUsuario.clasificador_institucionalColumn) = value
                End Set
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Property descripcion() As String
                Get
                    Return CType(Me(Me.tableEntidadesProcesoUsuario.descripcionColumn),String)
                End Get
                Set
                    Me(Me.tableEntidadesProcesoUsuario.descripcionColumn) = value
                End Set
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Property nombre_corto() As String
                Get
                    Return CType(Me(Me.tableEntidadesProcesoUsuario.nombre_cortoColumn),String)
                End Get
                Set
                    Me(Me.tableEntidadesProcesoUsuario.nombre_cortoColumn) = value
                End Set
            End Property
        End Class
        
        '''<summary>
        '''Row event argument class
        '''</summary>
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
        Public Class EntidadesProcesoUsuarioRowChangeEvent
            Inherits Global.System.EventArgs
            
            Private eventRow As EntidadesProcesoUsuarioRow
            
            Private eventAction As Global.System.Data.DataRowAction
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Sub New(ByVal row As EntidadesProcesoUsuarioRow, ByVal action As Global.System.Data.DataRowAction)
                MyBase.New
                Me.eventRow = row
                Me.eventAction = action
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public ReadOnly Property Row() As EntidadesProcesoUsuarioRow
                Get
                    Return Me.eventRow
                End Get
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public ReadOnly Property Action() As Global.System.Data.DataRowAction
                Get
                    Return Me.eventAction
                End Get
            End Property
        End Class
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")>  _
    Public Delegate Sub CuentaCompletedEventHandler(ByVal sender As Object, ByVal e As CuentaCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class CuentaCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As DatosUsuario
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),DatosUsuario)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")>  _
    Public Delegate Sub CuentaBasicaCompletedEventHandler(ByVal sender As Object, ByVal e As CuentaBasicaCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class CuentaBasicaCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")>  _
    Public Delegate Sub CuentaValidaCompletedEventHandler(ByVal sender As Object, ByVal e As CuentaValidaCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class CuentaValidaCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Integer
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Integer)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")>  _
    Public Delegate Sub EntidadesCompletedEventHandler(ByVal sender As Object, ByVal e As EntidadesCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class EntidadesCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As dsEntProcUsu
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),dsEntProcUsu)
            End Get
        End Property
    End Class
End Namespace
